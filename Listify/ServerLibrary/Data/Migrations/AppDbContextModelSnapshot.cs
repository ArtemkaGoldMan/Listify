// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerLibrary.Data;

#nullable disable

namespace ServerLibrary.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BaseLibrary.Entities.Content", b =>
                {
                    b.Property<int>("ContentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ContentID"));

                    b.Property<int>("ListOfContentID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("ContentID");

                    b.HasIndex("ListOfContentID");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("BaseLibrary.Entities.ContentTag", b =>
                {
                    b.Property<int>("ContentID")
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.Property<int>("TagID")
                        .HasColumnType("integer")
                        .HasColumnOrder(2);

                    b.HasKey("ContentID", "TagID");

                    b.HasIndex("TagID");

                    b.ToTable("ContentTags");
                });

            modelBuilder.Entity("BaseLibrary.Entities.ListOfContent", b =>
                {
                    b.Property<int>("ListOfContentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ListOfContentID"));

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("ListOfContentID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("ListOfContents");
                });

            modelBuilder.Entity("BaseLibrary.Entities.ListOfTags", b =>
                {
                    b.Property<int>("ListOfTagsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ListOfTagsID"));

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("ListOfTagsID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("ListOfTags");
                });

            modelBuilder.Entity("BaseLibrary.Entities.Tag", b =>
                {
                    b.Property<int>("TagID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagID"));

                    b.Property<int>("ListOfTagsID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("TagID");

                    b.HasIndex("ListOfTagsID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BaseLibrary.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserID"));

                    b.Property<bool>("IsUnlimited")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxContents")
                        .HasColumnType("integer");

                    b.Property<int>("MaxTags")
                        .HasColumnType("integer");

                    b.Property<string>("TelegramUserID")
                        .HasColumnType("text");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BaseLibrary.Entities.Content", b =>
                {
                    b.HasOne("BaseLibrary.Entities.ListOfContent", "ListOfContent")
                        .WithMany("Contents")
                        .HasForeignKey("ListOfContentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ListOfContent");
                });

            modelBuilder.Entity("BaseLibrary.Entities.ContentTag", b =>
                {
                    b.HasOne("BaseLibrary.Entities.Content", "Content")
                        .WithMany("ContentTags")
                        .HasForeignKey("ContentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BaseLibrary.Entities.Tag", "Tag")
                        .WithMany("ContentTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BaseLibrary.Entities.ListOfContent", b =>
                {
                    b.HasOne("BaseLibrary.Entities.User", "User")
                        .WithOne("ListOfContent")
                        .HasForeignKey("BaseLibrary.Entities.ListOfContent", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseLibrary.Entities.ListOfTags", b =>
                {
                    b.HasOne("BaseLibrary.Entities.User", "User")
                        .WithOne("ListOfTags")
                        .HasForeignKey("BaseLibrary.Entities.ListOfTags", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BaseLibrary.Entities.Tag", b =>
                {
                    b.HasOne("BaseLibrary.Entities.ListOfTags", "ListOfTags")
                        .WithMany("Tags")
                        .HasForeignKey("ListOfTagsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ListOfTags");
                });

            modelBuilder.Entity("BaseLibrary.Entities.Content", b =>
                {
                    b.Navigation("ContentTags");
                });

            modelBuilder.Entity("BaseLibrary.Entities.ListOfContent", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("BaseLibrary.Entities.ListOfTags", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("BaseLibrary.Entities.Tag", b =>
                {
                    b.Navigation("ContentTags");
                });

            modelBuilder.Entity("BaseLibrary.Entities.User", b =>
                {
                    b.Navigation("ListOfContent");

                    b.Navigation("ListOfTags");
                });
#pragma warning restore 612, 618
        }
    }
}
